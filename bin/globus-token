#!/usr/bin/env python3

import argparse
import os
import sys
sys.path.append("~/bin/pydeps")

here = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, os.path.join(here, "pydeps"))

from fair_research_login import JSONTokenStorage
from fair_research_login.client import NativeClient


CLIENT_ID = "5756773d-0d2b-4d29-8a69-8448a3781410"
CLIENT_NAME = "cli-token-client"


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--client-id",
        "-i",
        type=str,
        help="A registered Globus Auth native client id",
        default=CLIENT_ID,
    )
    parser.add_argument(
        "--client-name",
        "-n",
        type=str,
        help="The name of the requesting client to be reported to Globus Auth",
        default=CLIENT_NAME,
    )
    parser.add_argument(
        "--token-store",
        type=str,
        help="The name of the file where tokens should be cached",
        default="/home/rudyard/.config/globus/tokens.json",
    )
    parser.add_argument(
        "scopes",
        type=str,
        nargs="+",
        help="The scope of the remote service for which you desire a token",
    )
    args = parser.parse_args()

    cli = NativeClient(
        client_id=args.client_id,
        app_name=args.client_name,
        token_storage=JSONTokenStorage(args.token_store),
    )
    cli.login(
        requested_scopes=args.scopes, refresh_tokens=True,
    )

    authorizers = cli.get_authorizers()
    for resource_server, authorizer in authorizers.items():
        print(resource_server)
        print(authorizer)
        print(f"Access Token: {authorizer.access_token}")
        print(f"Refresh Token: {authorizer.refresh_token}")


if __name__ == "__main__":
    main()
